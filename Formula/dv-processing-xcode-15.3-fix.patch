diff --git a/include/dv-processing/core/utils.hpp b/include/dv-processing/core/utils.hpp
index 8c9e8893..4451c35e 100644
--- a/include/dv-processing/core/utils.hpp
+++ b/include/dv-processing/core/utils.hpp
@@ -1,7 +1,6 @@
 #pragma once
 
 // Common includes, useful for everyone.
-#include "../external/compare_compat.hpp"
 #include "../external/fmt_compat.hpp"
 
 #include "../exception/exceptions/generic_exceptions.hpp"
@@ -14,6 +13,7 @@
 #include <array>
 #include <cerrno>
 #include <cinttypes>
+#include <compare>
 #include <cstddef>
 #include <cstdint>
 #include <cstdlib>
diff --git a/include/dv-processing/data/cstring.hpp b/include/dv-processing/data/cstring.hpp
index d09ee266..e72437c9 100644
--- a/include/dv-processing/data/cstring.hpp
+++ b/include/dv-processing/data/cstring.hpp
@@ -1,12 +1,12 @@
 #pragma once
 
-#include "../external/compare_compat.hpp"
 #include "../external/fmt_compat.hpp"
 
 #include "../core/dvassert.hpp"
 #include "cptriterator.hpp"
 
 #include <array>
+#include <compare>
 #include <concepts>
 #include <filesystem>
 #include <limits>
diff --git a/include/dv-processing/data/cvector.hpp b/include/dv-processing/data/cvector.hpp
index 3c43e3bf..d1f2d6f3 100644
--- a/include/dv-processing/data/cvector.hpp
+++ b/include/dv-processing/data/cvector.hpp
@@ -1,12 +1,12 @@
 #pragma once
 
-#include "../external/compare_compat.hpp"
 #include "../external/fmt_compat.hpp"
 
 #include "../core/dvassert.hpp"
 #include "cptriterator.hpp"
 
 #include <array>
+#include <compare>
 #include <concepts>
 #include <limits>
 #include <span>
diff --git a/include/dv-processing/external/compare_compat.hpp b/include/dv-processing/external/compare_compat.hpp
deleted file mode 100644
index c864288e..00000000
--- a/include/dv-processing/external/compare_compat.hpp
+++ /dev/null
@@ -1,82 +0,0 @@
-#pragma once
-
-#include <compare>
-
-#if !(__cplusplus > 201703L && defined(__cpp_lib_three_way_comparison) && __cpp_lib_three_way_comparison >= 201907L) \
-	&& !defined(_MSC_VER)
-
-#	include <concepts>
-#	include <functional>
-#	include <iterator>
-
-namespace std {
-
-// Provide compatibility implementation of std::lexicographical_compare_three_way() from libc++ bug tracker.
-template<class _InputIterator1, class _InputIterator2, class _Cmp>
-_LIBCPP_HIDE_FROM_ABI constexpr auto lexicographical_compare_three_way(
-	_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _Cmp __comp)
-	-> decltype(__comp(*__first1, *__first2)) {
-	using return_type_t = decltype(__comp(*__first1, *__first2));
-	static_assert(
-		std::disjunction_v<std::is_same<return_type_t, std::strong_ordering>,
-			std::is_same<return_type_t, std::weak_ordering>, std::is_same<return_type_t, std::partial_ordering>>,
-		"The return type must be a comparison category type.");
-
-	if constexpr (__is_cpp17_random_access_iterator<_InputIterator1>::value
-				  && __is_cpp17_random_access_iterator<_InputIterator2>::value) {
-		// Fast path for random access iterators which computes the number of loop iterations up-front and
-		// then skips the iterator comparisons inside the loop.
-		static_assert(std::is_integral_v<typename std::iterator_traits<_InputIterator1>::difference_type>,
-			"Using a non-integral difference_type is undefined behavior");
-		static_assert(std::is_integral_v<typename std::iterator_traits<_InputIterator2>::difference_type>,
-			"Using a non-integral difference_type is undefined behavior");
-
-		auto __len1    = __last1 - __first1;
-		auto __len2    = __last2 - __first2;
-		auto __min_len = __len1 < __len2 ? __len1 : __len2;
-
-		for (decltype(__min_len) __i = 0; __i < __min_len; ++__i) {
-			auto __c = __comp(*__first1, *__first2);
-			if (__c != 0) {
-				return __c;
-			}
-			++__first1;
-			++__first2;
-		}
-
-		return __len1 <=> __len2;
-	}
-	else {
-		// Unoptimized implementation which compares the iterators against the end in every loop iteration
-		while (true) {
-			bool __exhausted1 = __first1 == __last1;
-			bool __exhausted2 = __first2 == __last2;
-
-			if (__exhausted1 || __exhausted2) {
-				if (!__exhausted1)
-					return strong_ordering::greater;
-				if (!__exhausted2)
-					return strong_ordering::less;
-				return strong_ordering::equal;
-			}
-
-			auto __c = __comp(*__first1, *__first2);
-			if (__c != 0) {
-				return __c;
-			}
-
-			++__first1;
-			++__first2;
-		}
-	}
-}
-
-template<class _InputIterator1, class _InputIterator2>
-_LIBCPP_HIDE_FROM_ABI constexpr auto lexicographical_compare_three_way(
-	_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2) {
-	return std::lexicographical_compare_three_way(__first1, __last1, __first2, __last2, std::compare_three_way{});
-}
-
-} // namespace std
-
-#endif
